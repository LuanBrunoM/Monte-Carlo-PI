# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n_zh-v56VWl84R4x_tyFSSVcn06vQkft
"""

import math 
import random
import time
import psutil 
import multiprocessing


def monte_carlo_pi(iterations):
  
    num_cpus = psutil.cpu_count(logical=True)

    total_inside = proc_monte_carlo_pi(num_cpus, iterations)

    total_iterations = num_cpus * iterations

    pi = total_inside / total_iterations * 4

    return (pi)


def monte_compute(iterations):
    inside = 0
    random.seed() 
    for _ in range(iterations):
        a = random.random()
        b = random.random()
        c = math.pow(a, 2.0) + math.pow(b, 2.0)
        if c <= 1.0:
            inside += 1
    return inside

def proc_monte_carlo_pi(num_cpus, iterations):
    with multiprocessing.Pool(num_cpus) as p: 
        results = p.map(monte_compute, [iterations] * num_cpus)
        total_inside = sum(results) 
    return total_inside

if __name__ == "__main__":
    start = time.time() 
    pi = monte_carlo_pi(10_000_000)
    
    stop = time.time() 

    print(f'Valor de PI: {pi}')
    print(f'Tempo de execução: {stop - start:.2f}')